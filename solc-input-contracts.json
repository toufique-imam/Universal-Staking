{
    "language": "Solidity",
    "sources": {
        "./contracts/flatten_sc.sol": {
            "content": "// Sources flattened with hardhat v2.17.3 https://hardhat.org\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\n// File @openzeppelin/contracts/utils/Context.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/access/Ownable.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/interfaces/IERC20.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// File @openzeppelin/contracts/utils/introspection/IERC165.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/interfaces/IERC721.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// File @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/interfaces/IERC721Receiver.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n// File @openzeppelin/contracts/security/Pausable.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract Pausable is Context {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    constructor() {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        _requireNotPaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        _requirePaused();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is paused.\r\n     */\r\n    function _requireNotPaused() internal view virtual {\r\n        require(!paused(), \"Pausable: paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the contract is not paused.\r\n     */\r\n    function _requirePaused() internal view virtual {\r\n        require(paused(), \"Pausable: not paused\");\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n}\r\n\r\n\r\n// File @openzeppelin/contracts/security/ReentrancyGuard.sol@v4.9.3\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/StakingContract.sol\r\n\r\n// Original license: SPDX_License_Identifier: MIT\r\npragma solidity ^0.8.0;\r\ncontract StakingContract is\r\n    Ownable,\r\n    Pausable,\r\n    ReentrancyGuard,\r\n    IERC721Receiver\r\n{\r\n    // Structure to represent staking pools\r\n    uint256 stakingFeePercentageDenominator = 1;\r\n    uint256 stakingFeePercentageNumerator = 100;\r\n    uint256 unstakingFeePercentageDenominator = 2;\r\n    uint256 unstakingFeePercentageNumerator = 100;\r\n    uint256 poolCreationFee = 0.001 ether;\r\n\r\n    struct StakingPool {\r\n        address stakingAddress;\r\n        IERC20 rewardToken;\r\n        uint256 stakingTokenDecimals;\r\n        uint256 rewardTokenDecimals;\r\n        uint256 rewardTokenAmount;\r\n        uint256 totalStaked;\r\n        uint256 startDate;\r\n        uint256 endDate;\r\n        address creator;\r\n        uint256 maxStakePerWallet;\r\n        bool isActive;\r\n        bool isNFT;\r\n        bool isSharedPool;\r\n        uint256 penaltyPercentageNumerator;\r\n        uint256 penaltyPercentageDenominator;\r\n        uint256 bonusPercentageNumerator;\r\n        uint256 bonusPercentageDenominator;\r\n        uint256 poolPeriod;\r\n    }\r\n    struct Stake {\r\n        uint256 poolId;\r\n        uint256 tokenId;\r\n        uint256 timestamp;\r\n        address owner;\r\n    }\r\n\r\n    // Mapping to track staking pools\r\n    mapping(uint256 => StakingPool) public stakingPools;\r\n\r\n    //mapping nft token id to stake\r\n    mapping(address => mapping(uint256 => Stake)) public vaults;\r\n    //for nft, staking address => token id => stake\r\n    // for token, user => poolId => stake and tokenID = token amount\r\n\r\n    uint256 public poolCount;\r\n\r\n    // Mapping to track user staked balances\r\n    mapping(address => mapping(uint256 => uint256)) public stakedBalances;\r\n    mapping(address => uint256) public tokenWithdrawBalances;\r\n\r\n    event PoolCreated(uint256 poolId);\r\n    event PoolStatusChanged(uint256 poolId, bool status);\r\n    event Staked(address indexed user, uint256 indexed poolId, uint256 amount);\r\n    event NFTStaked(address owner, uint256 poolId, uint256 tokenId);\r\n    event NFTUnstaked(address owner, uint256 poolId, uint256 tokenId);\r\n    event Unstaked(\r\n        address indexed user,\r\n        uint256 indexed poolId,\r\n        uint256 amount,\r\n        uint256 penalty\r\n    );\r\n    event RewardClaimed(\r\n        address indexed user,\r\n        uint256 indexed poolId,\r\n        uint256 amount\r\n    );\r\n\r\n    constructor(\r\n    ) {\r\n    }\r\n\r\n    /**\r\n     * @dev Function to create a new staking pool, pool creator pays a fee to create the pool\r\n     * @param _stakingAddress address of the staking token/nft\r\n     * @param _rewardTokenAddress address of the reward token\r\n     * @param _startDate start date of the staking period\r\n     * @param _endDate end date of the staking period\r\n     * @param _maxStakePerWallet maximum amount of tokens/nft that can be staked per wallet\r\n     * @param isNFT true if the pool is for NFTs\r\n     * @param isSharedPool true if the pool is shared\r\n     * @param penaltyPercentageN penalty Numerator for early unstaking\r\n     * @param penaltyPercentageD penalty Denominator for early unstaking\r\n     * @param bonusPercentageN bonus Numerator for shared pool\r\n     * @param bonusPercentageD bonus Denominator for shared pool\r\n     * @param poolPeriod pool period in seconds\r\n     */\r\n    function createStakingPool(\r\n        address _stakingAddress,\r\n        address _rewardTokenAddress,\r\n        uint256 _stakingTokenDecimals,\r\n        uint256 _rewardTokenDecimals,\r\n        uint256 _startDate,\r\n        uint256 _endDate,\r\n        uint256 _maxStakePerWallet,\r\n        bool isNFT,\r\n        bool isSharedPool,\r\n        uint256 penaltyPercentageN,\r\n        uint256 penaltyPercentageD,\r\n        uint256 bonusPercentageN,\r\n        uint256 bonusPercentageD,\r\n        uint256 poolPeriod\r\n    ) external payable whenNotPaused nonReentrant {\r\n        require(msg.value >= poolCreationFee, \"Insufficient fee\");\r\n        require(\r\n            _stakingAddress != address(0),\r\n            \"Staking address cannot be zero address\"\r\n        );\r\n        require(\r\n            _rewardTokenAddress != address(0),\r\n            \"Reward token address cannot be zero address\"\r\n        );\r\n        require(\r\n            _startDate > block.timestamp,\r\n            \"Start date cannot be in the past\"\r\n        );\r\n        require(_endDate > _startDate, \"End date cannot be before start date\");\r\n        require(\r\n            _maxStakePerWallet > 0,\r\n            \"Maximum stake per wallet cannot be zero\"\r\n        );\r\n        require(\r\n            penaltyPercentageN < penaltyPercentageD,\r\n            \"Penalty Numerator cannot be greater than Denominator\"\r\n        );\r\n        require(\r\n            bonusPercentageN < bonusPercentageD,\r\n            \"Bonus Numerator cannot be greater than Denominator\"\r\n        );\r\n        require(\r\n            poolPeriod > 0,\r\n            \"Pool period cannot be zero\"\r\n        );\r\n\r\n        uint256 poolId = poolCount;\r\n        stakingPools[poolId] = StakingPool(\r\n            _stakingAddress,\r\n            IERC20(_rewardTokenAddress),\r\n            _stakingTokenDecimals,\r\n            _rewardTokenDecimals,\r\n            0,\r\n            0,\r\n            _startDate,\r\n            _endDate,\r\n            msg.sender,\r\n            _maxStakePerWallet,\r\n            true,\r\n            isNFT,\r\n            isSharedPool,\r\n            penaltyPercentageN,\r\n            penaltyPercentageD,\r\n            bonusPercentageN,\r\n            bonusPercentageD, \r\n            poolPeriod\r\n        );\r\n        // isActivePool[poolId] = true;\r\n        poolCount++;\r\n\r\n        emit PoolCreated(poolId);\r\n    }\r\n\r\n    /**\r\n     * @dev Function for users to stake tokens\r\n     * @param _poolId pool id to stake in\r\n     * @param amount amount of tokens to stake\r\n     */\r\n    function receiveToken(uint256 _poolId, uint256 amount) public nonReentrant {\r\n        StakingPool storage pool = stakingPools[_poolId];\r\n        // Check if the pool is active\r\n        require(pool.isActive, \"This pool is not active\");\r\n        // Check if the staking period is valid\r\n        require(block.timestamp <= pool.endDate, \"Staking period is not valid\");\r\n        // Make sure to approve the contract to spend the tokens beforehand\r\n        require(\r\n            pool.rewardToken.allowance(msg.sender, address(this)) >= amount,\r\n            \"Please approve the contract to spend the tokens first\"\r\n        );\r\n        // Transfer staking tokens from the user to the contract\r\n        pool.rewardToken.transferFrom(msg.sender, address(this), amount);\r\n        pool.rewardTokenAmount += amount;\r\n    }\r\n\r\n    /**\r\n     * @dev Function for users to stake tokens\r\n     * @param _poolId pool id to stake in\r\n     * @param _amount amount of tokens to stake\r\n     */\r\n    function stakeToken(\r\n        uint256 _poolId,\r\n        uint256 _amount\r\n    ) public whenNotPaused nonReentrant {\r\n        StakingPool memory pool = stakingPools[_poolId];\r\n        // Check if the pool is active\r\n        require(pool.isActive, \"This pool is not active\");\r\n        // Check if the pool is not NFT\r\n        require(!pool.isNFT, \"This function is for Tokens only\");\r\n        // Check if the staking period is valid\r\n        require(\r\n            block.timestamp >= pool.startDate &&\r\n                block.timestamp <= pool.endDate,\r\n            \"Staking period is not valid\"\r\n        );\r\n        // Check if the user is not the creator of the pool\r\n        require(msg.sender != pool.creator, \"Creator cannot stake\");\r\n        // Check if the pool has any reward tokens\r\n        require(pool.rewardTokenAmount > 0, \"No reward token in the pool\");\r\n        // Check if the user's staked balance doesn't exceed the maximum allowed\r\n        require(\r\n            stakedBalances[msg.sender][_poolId] + _amount <=\r\n                pool.maxStakePerWallet,\r\n            \"Exceeded maximum stake limit\"\r\n        );\r\n        // Make sure to approve the contract to spend the tokens beforehand\r\n        require(\r\n            IERC20(pool.stakingAddress).allowance(msg.sender, address(this)) >=\r\n                _amount,\r\n            \"Please approve the contract to spend the tokens first\"\r\n        );\r\n\r\n        //claim unclaim rewards if any\r\n        if (stakedBalances[msg.sender][_poolId] > 0) {\r\n            _claimToken(\r\n                _poolId,\r\n                msg.sender,\r\n                stakedBalances[msg.sender][_poolId],\r\n                false\r\n            );\r\n        }\r\n\r\n        // Transfer staking tokens from the user to the contract\r\n        IERC20(pool.stakingAddress).transferFrom(\r\n            msg.sender,\r\n            address(this),\r\n            _amount\r\n        );\r\n\r\n        // Calculate staking fee\r\n        uint256 stakingFee = (_amount * stakingFeePercentageNumerator) /\r\n            stakingFeePercentageDenominator;\r\n\r\n        // update token withdraw balance\r\n        tokenWithdrawBalances[pool.stakingAddress] += stakingFee;\r\n\r\n        // Calculate net staked amount\r\n        uint256 netStakedAmount = _amount - stakingFee;\r\n\r\n        // Update user's staked balance\r\n        stakedBalances[msg.sender][_poolId] += netStakedAmount;\r\n        stakingPools[_poolId].totalStaked += netStakedAmount;\r\n        // Update total staked tokens in the pool\r\n        uint256 totalUserStaked = stakedBalances[msg.sender][_poolId];\r\n        // Update user's vault\r\n        vaults[msg.sender][_poolId] = Stake({\r\n            poolId: _poolId,\r\n            tokenId: totalUserStaked,\r\n            timestamp: block.timestamp,\r\n            owner: msg.sender\r\n        });\r\n\r\n        // Emit stake event\r\n        emit Staked(msg.sender, _poolId, _amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Function for users to stake NFTs\r\n     * @param _poolId pool id to stake in\r\n     * @param tokenIds Array of token ids to stake\r\n     */\r\n    function stakeNFT(\r\n        uint256 _poolId,\r\n        uint256[] calldata tokenIds\r\n    ) public whenNotPaused nonReentrant {\r\n        StakingPool memory pool = stakingPools[_poolId];\r\n        // Check if the pool is active\r\n        require(pool.isActive, \"This pool is not active\");\r\n        // Check if the pool is NFT\r\n        require(pool.isNFT, \"This function is for NFT stake only\");\r\n        // Check if the user is not the creator of the pool\r\n        require(msg.sender != pool.creator, \"Creator cannot stake\");\r\n        // Check if the staking period is valid\r\n        require(\r\n            block.timestamp >= pool.startDate &&\r\n                block.timestamp <= pool.endDate,\r\n            \"Staking period is not valid\"\r\n        );\r\n        // Check if the pool has any reward tokens\r\n        require(pool.rewardTokenAmount > 0, \"No reward token in the pool\");\r\n        require(tokenIds.length > 0, \"No NFT token to stake\");\r\n\r\n        // Check if the user's staked balance doesn't exceed the maximum allowed\r\n        require(\r\n            stakedBalances[msg.sender][_poolId] + tokenIds.length <=\r\n                pool.maxStakePerWallet,\r\n            \"Exceeded maximum stake limit\"\r\n        );\r\n\r\n        IERC721 nft = IERC721(pool.stakingAddress);\r\n        uint256 tokenId;\r\n        for (uint i = 0; i < tokenIds.length; i++) {\r\n            tokenId = tokenIds[i];\r\n            // check if token is owned by user\r\n            require(nft.ownerOf(tokenId) == msg.sender, \"not your token\");\r\n            // check if token is approved\r\n            require(nft.getApproved(tokenId) == address(this), \"not approved\");\r\n            // check if token is not already staked\r\n            require(\r\n                vaults[pool.stakingAddress][tokenId].tokenId == 0,\r\n                \"already staked\"\r\n            );\r\n            // Transfer staking tokens from the user to the contract\r\n            nft.safeTransferFrom(msg.sender, address(this), tokenId);\r\n            // Update user's staked balance\r\n            vaults[pool.stakingAddress][tokenId] = Stake({\r\n                poolId: _poolId,\r\n                tokenId: tokenId,\r\n                timestamp: block.timestamp,\r\n                owner: msg.sender\r\n            });\r\n            emit NFTStaked(msg.sender, _poolId, tokenId);\r\n        }\r\n        // Update total staked tokens in the pool\r\n        stakedBalances[msg.sender][_poolId] += tokenIds.length;\r\n        stakingPools[_poolId].totalStaked += tokenIds.length;\r\n    }\r\n\r\n    /**\r\n     * @dev Function for users to unstake tokens\r\n     * @param _poolId pool id to unstake from\r\n     * @param _amount amount of tokens to unstake\r\n     */\r\n    function unstakeToken(\r\n        uint256 _poolId,\r\n        uint256 _amount\r\n    ) external whenNotPaused nonReentrant {\r\n        _claimToken(_poolId, msg.sender, _amount, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Function for users to claim reward tokens\r\n     * @param _poolId pool id to claim rewards from\r\n     */\r\n    function claimToken(uint256 _poolId) external nonReentrant whenNotPaused {\r\n        // claim all rewards\r\n        _claimToken(\r\n            _poolId,\r\n            msg.sender,\r\n            stakedBalances[msg.sender][_poolId],\r\n            false\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @dev Internal Function to unstake tokens\r\n     * @param _poolId pool id to unstake from\r\n     * @param account address of the user\r\n     * @param _amount amount of tokens to unstake\r\n     */\r\n    function _unstakeToken(\r\n        uint256 _poolId,\r\n        address account,\r\n        uint256 _amount\r\n    ) internal {\r\n        StakingPool memory pool = stakingPools[_poolId];\r\n        // Check if the pool is active\r\n        // require(pool.isActive, \"This pool is not active\"); // adding this check will prevent users from unstaking after the pool is set inactive\r\n\r\n        // Check if the user has enough staked tokens\r\n        require(\r\n            stakedBalances[account][_poolId] >= _amount,\r\n            \"Insufficient staked balance\"\r\n        );\r\n        // Check if the staking period is valid\r\n        require(\r\n            block.timestamp >= pool.startDate,\r\n            \"Unstaking is not allowed before the staking period starts\"\r\n        );\r\n        // Calculate unstaking fee\r\n        uint256 unstakingFee = (_amount * unstakingFeePercentageNumerator) /\r\n            unstakingFeePercentageDenominator;\r\n        // Calculate penalty for early unstaking\r\n        uint256 penalty = 0;\r\n        if (block.timestamp < pool.endDate) {\r\n            penalty =\r\n                (_amount * pool.penaltyPercentageNumerator) /\r\n                pool.penaltyPercentageDenominator;\r\n        }\r\n        // Calculate net unstaked amount\r\n        uint256 netUnstakedAmount = _amount - unstakingFee - penalty;\r\n        // update token withdraw balance\r\n        tokenWithdrawBalances[pool.stakingAddress] += unstakingFee + penalty;\r\n\r\n        // Transfer staking tokens back to the user\r\n        IERC20(pool.stakingAddress).transfer(msg.sender, netUnstakedAmount);\r\n        // Update user's staked balance\r\n        stakedBalances[account][_poolId] -= _amount;\r\n        stakingPools[_poolId].totalStaked -= _amount;\r\n        // update vault\r\n        vaults[account][_poolId] = Stake({\r\n            poolId: _poolId,\r\n            tokenId: stakedBalances[account][_poolId],\r\n            timestamp: block.timestamp, // update timestamp to current time\r\n            owner: account\r\n        });\r\n        emit Unstaked(account, _poolId, _amount, penalty);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal Function to claim reward tokens\r\n     * @param _poolId pool id to claim rewards from\r\n     * @param account address of the user\r\n     * @param _amount amount of tokens to unstake\r\n     * @param _unstake true if user wants to unstake\r\n     */\r\n    function _claimToken(\r\n        uint256 _poolId,\r\n        address account,\r\n        uint256 _amount,\r\n        bool _unstake\r\n    ) internal {\r\n        StakingPool memory pool = stakingPools[_poolId];\r\n        // Check if the pool is active\r\n        // require(pool.isActive, \"This pool is not active\"); adding this check will prevent users from claiming rewards after the pool is set inactive\r\n        // Check if the pool is not NFT\r\n        require(!pool.isNFT, \"This function is for Tokens only\");\r\n        require(\r\n            block.timestamp >= pool.startDate,\r\n            \"Claiming is not allowed before the staking period starts\"\r\n        );\r\n        Stake memory staked = vaults[account][_poolId];\r\n        // Check if the user has staked tokens\r\n        if (staked.owner == address(0) || staked.tokenId == 0) return;\r\n\r\n        // Calculate earned reward tokens\r\n        uint256 earned = 0;\r\n        uint256 _tokenAmountInRewardDecimals = convertAmountToDecimal(\r\n            staked.tokenId,\r\n            pool.stakingTokenDecimals,\r\n            pool.rewardTokenDecimals\r\n        );\r\n        uint256 _periodStaked = (block.timestamp - staked.timestamp) / pool.poolPeriod;\r\n        if (pool.isSharedPool) {\r\n            //reward tokens distributed based on bonus percentage and amount staked\r\n            earned = _tokenAmountInRewardDecimals * pool.bonusPercentageNumerator * _periodStaked;\r\n            earned = earned / pool.bonusPercentageDenominator;\r\n        } else {\r\n            //reward tokens distributed based on total reward tokens and amount staked\r\n            uint256 totalPoolRewardPerPeriod = (pool.poolPeriod * pool.rewardTokenAmount) / (pool.endDate - pool.startDate);\r\n            uint256 totalStakeAmountInRewardDecimals = convertAmountToDecimal(\r\n                pool.totalStaked,\r\n                pool.stakingTokenDecimals,\r\n                pool.rewardTokenDecimals\r\n            );\r\n            uint256 rewardsPerStakedAmount = totalPoolRewardPerPeriod / totalStakeAmountInRewardDecimals;\r\n            earned = (_tokenAmountInRewardDecimals * rewardsPerStakedAmount * _periodStaked);\r\n        }\r\n        // update vault\r\n        vaults[account][_poolId] = Stake({\r\n            poolId: _poolId,\r\n            tokenId: staked.tokenId,\r\n            timestamp: block.timestamp, // update timestamp to current time\r\n            owner: account\r\n        });\r\n        // transfer reward tokens to user\r\n        if (earned > 0) {\r\n            require(\r\n                pool.rewardTokenAmount >= earned,\r\n                \"Not enough reward tokens in the pool\"\r\n            );\r\n            pool.rewardToken.transfer(account, earned);\r\n            stakingPools[_poolId].rewardTokenAmount -= earned;\r\n        }\r\n        if (_unstake) {\r\n            // unstake tokens if user wants to unstake\r\n            _unstakeToken(_poolId, account, _amount);\r\n        }\r\n        emit RewardClaimed(account, _poolId, earned);\r\n    }\r\n\r\n    /**\r\n     * @dev Function for users to unstake NFTs\r\n     * @param _poolId pool id to unstake from\r\n     * @param tokenIds Array of token ids to unstake\r\n     */\r\n    function unstakeNFT(\r\n        uint256 _poolId,\r\n        uint256[] calldata tokenIds\r\n    ) external nonReentrant whenNotPaused {\r\n        _claimNFT(_poolId, msg.sender, tokenIds, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Function for users to claim reward tokens\r\n     * @param _poolId Pool id to claim rewards from\r\n     * @param tokenIds Array of token ids to claim rewards from\r\n     */\r\n    function claimNFT(\r\n        uint256 _poolId,\r\n        uint256[] calldata tokenIds\r\n    ) external nonReentrant whenNotPaused {\r\n        _claimNFT(_poolId, msg.sender, tokenIds, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Internal Function to unstake NFTs\r\n     * @param _poolId pool id to unstake from\r\n     * @param account address of the user\r\n     * @param tokenIds Array of token ids to unstake\r\n     */\r\n    function _unstakeNFT(\r\n        uint256 _poolId,\r\n        address account,\r\n        uint256[] calldata tokenIds\r\n    ) internal {\r\n        uint256 tokenId;\r\n        StakingPool memory pool = stakingPools[_poolId];\r\n        // require(pool.isActive, \"This pool is not active\"); // adding this check will prevent users from unstaking after the pool is set inactive\r\n        require(pool.isNFT, \"This function is for NFT stake only\");\r\n        require(\r\n            block.timestamp >= pool.startDate,\r\n            \"Unstaking is not allowed before the staking period starts\"\r\n        );\r\n        // update total staked tokens in the pool\r\n        stakingPools[_poolId].totalStaked -= tokenIds.length;\r\n        // update user's staked balance\r\n        stakedBalances[account][_poolId] -= tokenIds.length;\r\n\r\n        for (uint i = 0; i < tokenIds.length; i++) {\r\n            tokenId = tokenIds[i];\r\n            Stake memory staked = vaults[pool.stakingAddress][tokenId];\r\n            require(staked.owner == account, \"not an owner\");\r\n\r\n            delete vaults[pool.stakingAddress][tokenId];\r\n            \r\n            // Transfer staking tokens back to the user\r\n            IERC721(pool.stakingAddress).safeTransferFrom(\r\n                address(this),\r\n                account,\r\n                tokenId\r\n            );\r\n            emit NFTUnstaked(account, _poolId, tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Internal Function to claim reward tokens\r\n     * @param _poolId pool id to claim rewards from\r\n     * @param account address of the user\r\n     * @param tokenIds Array of token ids to claim rewards from\r\n     * @param _unstake true if user wants to unstake\r\n     */\r\n    function _claimNFT(\r\n        uint256 _poolId,\r\n        address account,\r\n        uint256[] calldata tokenIds,\r\n        bool _unstake\r\n    ) internal {\r\n        StakingPool memory pool = stakingPools[_poolId];\r\n        // require(pool.isActive, \"This pool is not active\"); // adding this check will prevent users from claiming rewards after the pool is set inactive\r\n        require(pool.isNFT, \"This function is for NFT stake only\");\r\n        require(\r\n            block.timestamp >= pool.startDate,\r\n            \"Claiming is not allowed before the staking period starts\"\r\n        );\r\n        uint256 tokenId;\r\n        uint256 earned = 0;\r\n\r\n        for (uint i = 0; i < tokenIds.length; i++) {\r\n            tokenId = tokenIds[i];\r\n            Stake memory staked = vaults[pool.stakingAddress][tokenId];\r\n            require(staked.owner == account, \"not an owner\");\r\n            uint256 _periodStaked = (block.timestamp - staked.timestamp) / pool.poolPeriod;\r\n            if (pool.isSharedPool) {\r\n                // reward tokens distributed based on bonus percentage and amount staked\r\n                earned = earned + (pool.bonusPercentageNumerator * _periodStaked) / pool.bonusPercentageDenominator;\r\n            } else {\r\n                // reward tokens distributed based on total reward tokens and amount staked\r\n                uint256 totalPoolRewardPerPeriod = (pool.poolPeriod * pool.rewardTokenAmount) / (pool.endDate - pool.startDate);\r\n                uint256 rewardsPerStakedAmount = totalPoolRewardPerPeriod / pool.totalStaked;\r\n                earned = earned + (rewardsPerStakedAmount * _periodStaked);\r\n            }\r\n            vaults[pool.stakingAddress][tokenId] = Stake({\r\n                poolId: _poolId,\r\n                tokenId: tokenId,\r\n                timestamp: block.timestamp, // update timestamp to current time\r\n                owner: account\r\n            });\r\n        }\r\n        uint256 penaltyFee = 0;\r\n        uint256 unstakingFee = 0;\r\n        if (_unstake) {\r\n            // calculate penalty\r\n            if (pool.endDate < block.timestamp) {\r\n                penaltyFee = (earned * pool.penaltyPercentageNumerator) / pool.penaltyPercentageDenominator;\r\n            }\r\n            // calculate unstaking fee\r\n            unstakingFee = (earned * unstakingFeePercentageNumerator) / unstakingFeePercentageDenominator;\r\n        }\r\n        // calculate net earned amount\r\n        earned = earned - penaltyFee - unstakingFee;\r\n        if (earned > 0) {\r\n            require(\r\n                pool.rewardTokenAmount >= earned,\r\n                \"Not enough reward tokens in the pool\"\r\n            );\r\n            pool.rewardToken.transfer(account, earned);\r\n            \r\n            stakingPools[_poolId].rewardTokenAmount -= earned;\r\n            stakingPools[_poolId].totalStaked -= tokenIds.length;\r\n            \r\n            stakedBalances[account][_poolId] -= tokenIds.length;\r\n            // update token withdraw balance\r\n            tokenWithdrawBalances[address(pool.rewardToken)] += penaltyFee + unstakingFee;\r\n        }\r\n        if (_unstake) {\r\n            _unstakeNFT(_poolId, account, tokenIds);\r\n        }\r\n        emit RewardClaimed(account, _poolId, earned);\r\n    }\r\n\r\n    /**\r\n     * @dev Function to convert amount to decimal\r\n     * @param amount amount to convert\r\n     * @param currentDecimals current decimals of the token\r\n     * @param targetDecimals target decimals of the token\r\n     */\r\n    function convertAmountToDecimal(\r\n        uint256 amount,\r\n        uint256 currentDecimals,\r\n        uint256 targetDecimals\r\n    ) internal pure returns (uint256) {\r\n        // 10^currentDecimals = 10^targetDecimals\r\n        // amount = amount * 10^(targetDecimals - currentDecimals)\r\n        if (currentDecimals == targetDecimals) return amount;\r\n        if (currentDecimals > targetDecimals) {\r\n            return amount / (10 ** (currentDecimals - targetDecimals));\r\n        } else {\r\n            return amount * (10 ** (targetDecimals - currentDecimals));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check if a pool exists\r\n     * @param _poolId pool id\r\n     * @return bool true if pool exists, false otherwise\r\n     */\r\n    function poolExists(uint256 _poolId) external view returns (bool) {\r\n        return _poolId < poolCount;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to check if a pool is active\r\n     * @param _poolId pool id\r\n     * @return bool true if pool is active, false otherwise\r\n     */\r\n    function poolIsActive(uint256 _poolId) external view returns (bool) {\r\n        return\r\n            stakingPools[_poolId].isActive &&\r\n            block.timestamp >= stakingPools[_poolId].startDate &&\r\n            block.timestamp <= stakingPools[_poolId].endDate;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to get pool info\r\n     * @param _poolId pool id\r\n     * @return StakingPool struct\r\n     */\r\n    function getPoolInfo(\r\n        uint256 _poolId\r\n    ) external view returns (StakingPool memory) {\r\n        return stakingPools[_poolId];\r\n    }\r\n\r\n    /**\r\n     * @dev Function to get user's reward info for staked nfts\r\n     * @param _poolId pool id\r\n     * @param tokenIds array of token ids\r\n     */\r\n    function earningInfoNFT(\r\n        uint256 _poolId,\r\n        uint256[] calldata tokenIds\r\n    ) external view returns (uint256) {\r\n        uint256 tokenId;\r\n        uint256 earned = 0;\r\n        StakingPool memory pool = stakingPools[_poolId];\r\n        if (pool.isNFT == false) return earned;\r\n\r\n        for (uint i = 0; i < tokenIds.length; i++) {\r\n            tokenId = tokenIds[i];\r\n            Stake memory staked = vaults[pool.stakingAddress][tokenId];\r\n            uint256 _periodStaked = (block.timestamp - staked.timestamp) / pool.poolPeriod;\r\n            if (pool.isSharedPool) {\r\n                // reward tokens distributed based on bonus percentage and amount staked\r\n                earned = earned + (pool.bonusPercentageNumerator * _periodStaked) / pool.bonusPercentageDenominator;\r\n            } else {\r\n                // reward tokens distributed based on total reward tokens and amount staked\r\n                uint256 totalPoolRewardPerPeriod = (pool.poolPeriod * pool.rewardTokenAmount) / (pool.endDate - pool.startDate);\r\n                uint256 rewardsPerStakedAmount = totalPoolRewardPerPeriod / pool.totalStaked;\r\n                earned = earned + (rewardsPerStakedAmount * _periodStaked);\r\n            }\r\n        }\r\n        return earned;\r\n    }\r\n\r\n    /**\r\n     * @dev Function to get user's reward info for staked tokens\r\n     * @param _poolId pool id\r\n     * @param account address of the user\r\n     */\r\n    function earningInfoToken(\r\n        uint256 _poolId,\r\n        address account\r\n    ) external view returns (uint256) {\r\n        uint256 earned = 0;\r\n        StakingPool memory pool = stakingPools[_poolId];\r\n        if (pool.isNFT == true) return earned;\r\n        Stake memory staked = vaults[account][_poolId];\r\n        uint256 _tokenAmountInRewardDecimals = convertAmountToDecimal(\r\n            staked.tokenId,\r\n            pool.stakingTokenDecimals,\r\n            pool.rewardTokenDecimals\r\n        );\r\n        uint256 _periodStaked = (block.timestamp - staked.timestamp) / pool.poolPeriod;\r\n        if (pool.isSharedPool) {\r\n            //reward tokens distributed based on bonus percentage and amount staked\r\n            earned = _tokenAmountInRewardDecimals * pool.bonusPercentageNumerator * _periodStaked;\r\n            earned = earned / pool.bonusPercentageDenominator;\r\n        } else {\r\n            //reward tokens distributed based on total reward tokens and amount staked\r\n            uint256 totalPoolRewardPerPeriod = (pool.poolPeriod * pool.rewardTokenAmount) / (pool.endDate - pool.startDate);\r\n            uint256 totalStakeAmountInRewardDecimals = convertAmountToDecimal(\r\n                pool.totalStaked,\r\n                pool.stakingTokenDecimals,\r\n                pool.rewardTokenDecimals\r\n            );\r\n            uint256 rewardsPerStakedAmount = totalPoolRewardPerPeriod / totalStakeAmountInRewardDecimals;\r\n            earned = (_tokenAmountInRewardDecimals * rewardsPerStakedAmount * _periodStaked);\r\n        }\r\n        return earned;\r\n    }\r\n\r\n    /**\r\n     * @dev Changes pool status, can only be called by the creator of the pool.\r\n     * @param _poolId pool id\r\n     * @param status true for active and false for inactive\r\n     */\r\n    function setPoolInactive(\r\n        uint256 _poolId,\r\n        bool status\r\n    ) external nonReentrant {\r\n        StakingPool storage pool = stakingPools[_poolId];\r\n        require(\r\n            pool.creator == msg.sender,\r\n            \"Only creator can change pool status\"\r\n        );\r\n        require(pool.isActive != status, \"Pool is already in the same state\");\r\n        pool.isActive = status;\r\n        emit PoolStatusChanged(_poolId, status);\r\n    }\r\n\r\n    function withdrawStake(uint256 _poolId) external nonReentrant {\r\n        StakingPool storage pool = stakingPools[_poolId];\r\n        require(pool.creator == msg.sender, \"Only creator can withdraw\");\r\n        require(pool.isActive == false, \"Pool is active\");\r\n        pool.rewardToken.transfer(msg.sender, pool.rewardTokenAmount);\r\n        pool.rewardTokenAmount = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws ERC20 tokens from contract, can only be called by the owner.\r\n     * can be used to withdraw staking and reward tokens\r\n     * amount of token to withdraw is tracked in tokenWithdrawBalances mapping\r\n     * @param token address of token to withdraw\r\n     */\r\n    function withdrawToken(\r\n        address token\r\n    ) external onlyOwner whenPaused nonReentrant {\r\n        uint256 amount = tokenWithdrawBalances[token];\r\n        require(amount > 0, \"No token to withdraw\");\r\n        IERC20(token).transfer(msg.sender, amount);\r\n        tokenWithdrawBalances[token] = 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Withdraws ETH from contract, can only be called by the owner.\r\n     */\r\n    function withdraw() external onlyOwner nonReentrant {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    /**\r\n     * @dev pause and unpause contract, can only be called by the owner.\r\n     */\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    /**\r\n     * @dev function to receive ERC721 tokens, when safeTransferFrom is called on ERC721 contract\r\n     */\r\n    function onERC721Received(\r\n        address,\r\n        address,\r\n        uint256,\r\n        bytes calldata\r\n    ) external pure override returns (bytes4) {\r\n        return\r\n            IERC721Receiver.onERC721Received.selector ^ this.stakeNFT.selector;\r\n    }\r\n\r\n    /**\r\n     * @dev set staking fee percentage, can only be called by the owner.\r\n     * @param _stakingFeePercentageN Staking fee percentage nominator\r\n     * @param _stakingFeePercentageD Staking fee percentage dominator\r\n     */\r\n    function setStakingFeePercentage(\r\n        uint256 _stakingFeePercentageN,\r\n        uint256 _stakingFeePercentageD\r\n    ) external onlyOwner {\r\n        require(\r\n            _stakingFeePercentageN < _stakingFeePercentageD,\r\n            \"Invalid staking fee percentage\"\r\n        );\r\n        stakingFeePercentageNumerator = _stakingFeePercentageN;\r\n        stakingFeePercentageDenominator = _stakingFeePercentageD;\r\n    }\r\n\r\n    /**\r\n     * @dev set unstaking fee percentage, can only be called by the owner.\r\n     * @param _unstakingFeePercentageN Unstaking fee percentage nominator\r\n     * @param _unstakingFeePercentageD Unstaking fee percentage dominator\r\n     */\r\n    function setUnstakingFeePercentage(\r\n        uint256 _unstakingFeePercentageN,\r\n        uint256 _unstakingFeePercentageD\r\n    ) external onlyOwner {\r\n        require(\r\n            _unstakingFeePercentageN < _unstakingFeePercentageD,\r\n            \"Invalid unstaking fee percentage\"\r\n        );\r\n        unstakingFeePercentageNumerator = _unstakingFeePercentageN;\r\n        unstakingFeePercentageDenominator = _unstakingFeePercentageD;\r\n    }\r\n\r\n    function getStakingFeePercentage()\r\n        external\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        return (stakingFeePercentageNumerator, stakingFeePercentageDenominator);\r\n    }\r\n\r\n    function getUnstakingFeePercentage()\r\n        external\r\n        view\r\n        returns (uint256, uint256)\r\n    {\r\n        return (\r\n            unstakingFeePercentageNumerator,\r\n            unstakingFeePercentageDenominator\r\n        );\r\n    }\r\n\r\n    function setPoolCreationFee(uint256 _poolCreationFee) external onlyOwner {\r\n        poolCreationFee = _poolCreationFee;\r\n    }\r\n\r\n    function getPoolCreationFee() external view returns (uint256) {\r\n        return poolCreationFee;\r\n    }\r\n}\r\n"
        }
    },
    "settings": {
        "metadata": {
            "useLiteralContent": true
        },
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "viaIR": true,
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ],
                "": [
                    "id",
                    "ast"
                ]
            }
        }
    }
}